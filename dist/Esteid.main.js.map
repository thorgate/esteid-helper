{"mappings":";;;;;;;;;;AGAO,MAAM,4CAAc;AACpB,MAAM,4CAAc;AACpB,MAAM,2CAAc;AACpB,MAAM,4CAAc;AAE3B,MAAM,kCAAY;IAAC;IAAa;IAAa;IAAa;CAAY;AAEtE,MAAM,sCAAgB;IAClB,aAAa;QACT,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,yCAAY,EAAE;IACnB;IAEA,iBAAiB;QACb,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,yCAAY,EAAE;IACnB;IAEA,kBAAkB;QACd,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,yCAAY,EAAE;IACnB;IAEA,mBAAmB;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,yCAAY,EAAE;IACnB;IAEA,iBAAiB;QACb,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,yCAAY,EAAE;IACnB;IAEA,aAAa;QACT,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,0CAAY,EAAE;QACf,CAAC,yCAAY,EAAE;IACnB;AACJ;AAEA,MAAM;IACF,YAAY,QAAQ,CAAE;QAClB,IAAI,CAAC,QAAQ,GAAG,YAAY;QAE5B,kDAAkD;QAClD,IAAI,CAAC,WAAW,GAAG,IAAI;QACvB,IAAI,CAAC,4BAA4B,GAAG,IAAI;QAExC,wCAAwC;QACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI;IAClC;IAEA,mBAAmB;QACf;;;;;;;;;;SAUC,GACD,OAAO,IAAI,QAAQ,SAAU,OAAO,EAAE,MAAM,EAAE;YAC1C,IAAI,OAAO,OAAO,MAAM,KAAK,aACzB,QAAQ;iBACL,IAAI,OAAO,OAAO,QAAQ,KAAK,eAAe,OAAO,QAAQ,CAAC,GAAG,CAAC,SACrE,QAAQ;iBAER,OAAO;QAEf;IACJ;IAEA;;;;;;;;;;;KAWC,GACD,iBAAiB;QACb,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,MAAM,UAAU;gBAAE,MAAM,IAAI,CAAC,QAAQ;YAAC;YAEtC,OAAO,MAAM,CAAC,qBAAqB,CAAC,SAAS,IAAI,CAC7C,CAAC,eAAE,YAAW,gCAAE,6BAA4B,EAAE,GAAK;gBAC/C,IAAI,CAAC,WAAW,GAAG;gBACnB,IAAI,CAAC,4BAA4B,GAAG;gBAEpC,QAAQ;YACZ,GACA,CAAC,MAAQ;gBACL,OAAO;YACX;QAER;IACJ;IAEA;;;;;;;;;;;;;;;;;;;;;;KAsBC,GACD,YAAY,IAAI,EAAE,eAAe,SAAS,EAAE;QACxC,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,MAAM,UAAU;gBAAE,MAAM,IAAI,CAAC,QAAQ;YAAC;YAEtC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,cAAc,SAAS,IAAI,CAClE,CAAC,eAAiB;gBACd,IAAI,CAAC,kBAAkB,GAAG,aAAa,kBAAkB;gBACzD,QAAQ,aAAa,SAAS;YAClC,GACA,CAAC,MAAQ;gBACL,OAAO;YACX;QAER;IACJ;IAEA,YAAY,GAEZ,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,SAAS;IACzB;IAEA,IAAI,SAAS,CAAC,EAAE;QACZ,IAAI,gCAAU,OAAO,CAAC,OAAO,IACzB,IAAI,CAAC,SAAS,GAAG;IAEzB;IAEA,UAAU,GACV,SAAS,GAAG,EAAE;QACV,uCAAuC;QACvC,EAAE;QACF,oDAAoD;QAEpD,IAAI,OAAO,mCAAa,CAAC,IAAI,KAAK,aAC9B,MAAM;QAGV,OAAO;YAAE,YAAY;YAAK,SAAS,mCAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;QAAC;IACzE;AACJ;IAEA,2CAAe;;ADrLf;AAEA,MAAM,gCAAU,OAAO,KAAK,MAAM,SAAS,MAAM,GAAK;IAClD,MAAM,UAAU;QACZ,gBAAgB;IACpB;IACA,IAAI,OAAO,IAAI;IACf,IAAI,WAAW,OAAO;QAClB,qEAAqE;QACrE,OAAO,CAAC,cAAc,GAAG,KAAK,mBAAmB;QACjD,OAAO,KAAK,SAAS,CAAC,QAAQ,CAAC;IACnC,CAAC;IACD,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,KAAK;oBAAE;qBAAQ;kBAAS;QAAK;QAE1D,MAAM,eAAe,MAAM,SAAS,IAAI;QAExC,IAAI;YACA,MAAM,OAAO,KAAK,KAAK,CAAC;YACxB,KAAK,OAAO,GAAG,KAAK,MAAM,KAAK;YAC/B,KAAK,OAAO,GAAG,CAAC,EAAE,SAAS,MAAM,CAAC,CAAC,KAAK;YACxC,OAAO;sBACH;gBACA,IAAI,SAAS,EAAE;YACnB;QACJ,EAAE,OAAO,KAAK;YACV,QAAQ,GAAG,CAAC,oCAAoC;YAChD,OAAO,CAAC;QACZ;IACJ,EAAE,OAAO,KAAK;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO,CAAC;IACZ;AACJ;AAEA,MAAM;IACF,YAAY,YAAE,SAAQ,SAAE,MAAK,eAAE,YAAW,cAAE,WAAU,aAAE,UAAS,gBAAE,aAAY,EAAE,CAAE;QAC/E,8BAA8B;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA,GAAA,wCAAa,AAAD,EAAE;QAEvC,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,YAAY,GAAG,gBAAgB;IACxC;IAEA,YAAY,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE;QACnC,MAAM,eAAe,IAAI,CAAC,YAAY;QACtC,MAAM,sBAAsB,IAAI,CAAC,SAAS;QAC1C,MAAM,YAAY,IAAM;YACpB,8BAAQ,UAAU;qCAAE;YAAoB,GAAG,SACtC,IAAI,CAAC,CAAC,MAAE,GAAE,QAAE,KAAI,EAAE,GAAK;gBACpB,IAAI,MAAM,KAAK,OAAO,EAClB,WAAW,IAAM,aAAa;qBAC3B,IAAI,MAAM,KAAK,OAAO,EACzB,QAAQ;qBAER,OAAO;YAEf,GACC,KAAK,CAAC,CAAC,MAAQ;gBACZ,QAAQ,GAAG,CAAC,gBAAgB;YAChC;QACR;QACA,OAAO;IACX;IAEA,iBAAiB;QACb,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,IAAI,CAAC,kBAAkB,CAAC,SAAS;QACrC;IACJ;IAEA,iBAAiB,UAAE,OAAM,eAAE,YAAW,EAAE,EAAE;QACtC,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,IAAI,CAAC,eAAe,CAAC,QAAQ,aAAa,SAAS;QACvD;IACJ;IAEA,gBAAgB,UAAE,OAAM,WAAE,QAAO,EAAE,EAAE;QACjC,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,SAAS,SAAS;QACvD;IACJ;IAEA,mBAAmB,OAAO,EAAE,MAAM,EAAE;QAChC,IAAI,CAAC,aAAa,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAM;YAC7C,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC,cAAgB;gBACtD,8BAAQ,IAAI,CAAC,KAAK,EAAE;oBAChB,qBAAqB,IAAI,CAAC,SAAS;oBACnC,aAAa;gBACjB,GAAG,IAAI,CAAC,CAAC,MAAE,GAAE,QAAE,KAAI,EAAE,GAAK;oBACtB,IAAI,MAAM,KAAK,OAAO,EAClB,IAAI,CAAC,QAAQ,CAAC,KAAK,MAAM,EAAE,SAAS;yBAEpC,OAAO;gBAEf;YACJ,GAAG;QACP,GAAG;IACP;IAEA,SAAS,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE;QAClC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,YAAY,IAAI,CAAC,CAAC,YAAc;YAC3D,8BACI,IAAI,CAAC,KAAK,EACV;gBACI,qBAAqB,IAAI,CAAC,SAAS;gBACnC,iBAAiB;YACrB,GACA,SACF,IAAI,CAAC,CAAC,MAAE,GAAE,QAAE,KAAI,EAAE,GAAK;gBACrB,IAAI,MAAM,KAAK,OAAO,EAClB,QAAQ;qBAER,OAAO;YAEf;QACJ,GAAG;IACP;IAEA,gBAAgB,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE;QAClD,8BAAQ,IAAI,CAAC,WAAW,EAAE;YACtB,SAAS;YACT,cAAc;YACd,UAAU,IAAI,CAAC,QAAQ;YACvB,qBAAqB,IAAI,CAAC,SAAS;QACvC,GAAG,IAAI,CAAC,CAAC,MAAE,GAAE,QAAE,KAAI,EAAE,GAAK;YACtB,IAAI,MAAM,KAAK,OAAO,EAClB,QAAQ;iBAER,OAAO;QAEf;IACJ;IAEA,YAAY;QACR,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS;QAChD;IACJ;IAEA,oBAAoB,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;QAClD,8BAAQ,IAAI,CAAC,UAAU,EAAE;YACrB,SAAS;qBACT;YACA,qBAAqB,IAAI,CAAC,SAAS;QACvC,GAAG,IAAI,CAAC,CAAC,MAAE,GAAE,QAAE,KAAI,EAAE,GAAK;YACtB,IAAI,MAAM,KAAK,OAAO,EAClB,QAAQ;iBAER,OAAO;QAEf;IACJ;IAEA,gBAAgB;QACZ,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;YACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,SAAS;QAC/C;IACJ;IAEA,SAAS,GAAG,EAAE;QACV,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;IACvC;AACJ;IAEA,2CAAe;;ADzKf;;IAIA,2CAAe;IACX,uBAAuB,CAAA,GAAA,wCAAoB;IAE3C,WAAW;QACP,IAAI,CAAA,GAAA,yCAAU;QACd,IAAI,CAAA,GAAA,yCAAU;QACd,IAAI,CAAA,GAAA,wCAAU;QACd,IAAI,CAAA,GAAA,yCAAU;IAClB;AACJ;;ADbA;AAEA,IAAI,qCACA,OAAO,eAAe,cAChB,aACA,OAAO,SAAS,cAChB,OACA,OAAO,WAAW,cAClB,SACA,OAAO,mBAAW,cAClB,iBACA,CAAC,CAAC;AAEZ,mCAAa,MAAM,GAAG,CAAA,GAAA,wCAAG,AAAD;IAExB,2CAAe,CAAA,GAAA,wCAAE","sources":["global.js","lib.js","IdentificationManager.js","IdCardManager.js"],"sourcesContent":["import lib from \"./lib.js\";\n\nvar globalObject =\n    typeof globalThis !== \"undefined\"\n        ? globalThis\n        : typeof self !== \"undefined\"\n        ? self\n        : typeof window !== \"undefined\"\n        ? window\n        : typeof global !== \"undefined\"\n        ? global\n        : {};\n\nglobalObject.Esteid = lib;\n\nexport default lib;\n","import IdentificationManager from \"./IdentificationManager\";\n\nimport { LANGUAGE_ET, LANGUAGE_EN, LANGUAGE_RU, LANGUAGE_LT } from \"./IdCardManager\";\n\nexport default {\n    IdentificationManager: IdentificationManager,\n\n    Languages: {\n        ET: LANGUAGE_ET,\n        EN: LANGUAGE_EN,\n        RU: LANGUAGE_RU,\n        LT: LANGUAGE_LT,\n    },\n};\n","import IdCardManager from \"./IdCardManager\";\n\nconst request = async (url, data, method = \"POST\") => {\n    const headers = {\n        \"Content-Type\": \"application/json\",\n    };\n    let body = null;\n    if (method !== \"GET\") {\n        // we don't make use of GET currently, but let's add a check for that\n        headers[\"X-CSRFToken\"] = data.csrfmiddlewaretoken;\n        body = JSON.stringify(data || {});\n    }\n    try {\n        const response = await fetch(url, { method, headers, body });\n\n        const responseText = await response.text();\n\n        try {\n            const data = JSON.parse(responseText);\n            data.success = data.status === \"success\";\n            data.pending = `${response.status}` === \"202\";\n            return {\n                data,\n                ok: response.ok,\n            };\n        } catch (err) {\n            console.log(\"Failed to parse response as JSON\", responseText);\n            return {};\n        }\n    } catch (err) {\n        console.log(err);\n        return {};\n    }\n};\n\nclass IdentificationManager {\n    constructor({ language, idUrl, mobileIdUrl, smartIdUrl, csrfToken, pollInterval }) {\n        // construct the idCardManager\n        this.idCardManager = new IdCardManager(language);\n\n        this.idUrl = idUrl;\n        this.mobileIdUrl = mobileIdUrl;\n        this.smartIdUrl = smartIdUrl;\n        this.csrfToken = csrfToken;\n        this.language = language;\n        this.pollInterval = pollInterval || 3000;\n    }\n\n    checkStatus(endpoint, resolve, reject) {\n        const pollInterval = this.pollInterval;\n        const csrfmiddlewaretoken = this.csrfToken;\n        const doRequest = () => {\n            request(endpoint, { csrfmiddlewaretoken }, \"PATCH\")\n                .then(({ ok, data }) => {\n                    if (ok && data.pending) {\n                        setTimeout(() => doRequest(), pollInterval);\n                    } else if (ok && data.success) {\n                        resolve(data);\n                    } else {\n                        reject(data);\n                    }\n                })\n                .catch((err) => {\n                    console.log(\"Status error\", err);\n                });\n        };\n        return doRequest();\n    }\n\n    signWithIdCard() {\n        return new Promise((resolve, reject) => {\n            this.__signHandleIdCard(resolve, reject);\n        });\n    }\n\n    signWithMobileId({ idCode, phoneNumber }) {\n        return new Promise((resolve, reject) => {\n            this.__signHandleMid(idCode, phoneNumber, resolve, reject);\n        });\n    }\n\n    signWithSmartId({ idCode, country }) {\n        return new Promise((resolve, reject) => {\n            this.__signHandleSmartid(idCode, country, resolve, reject);\n        });\n    }\n\n    __signHandleIdCard(resolve, reject) {\n        this.idCardManager.initializeIdCard().then(() => {\n            this.idCardManager.getCertificate().then((certificate) => {\n                request(this.idUrl, {\n                    csrfmiddlewaretoken: this.csrfToken,\n                    certificate: certificate,\n                }).then(({ ok, data }) => {\n                    if (ok && data.success) {\n                        this.__doSign(data.digest, resolve, reject);\n                    } else {\n                        reject(data);\n                    }\n                });\n            }, reject);\n        }, reject);\n    }\n\n    __doSign(dataDigest, resolve, reject) {\n        this.idCardManager.signHexData(dataDigest).then((signature) => {\n            request(\n                this.idUrl,\n                {\n                    csrfmiddlewaretoken: this.csrfToken,\n                    signature_value: signature,\n                },\n                \"PATCH\",\n            ).then(({ ok, data }) => {\n                if (ok && data.success) {\n                    resolve(data);\n                } else {\n                    reject(data);\n                }\n            });\n        }, reject);\n    }\n\n    __signHandleMid(idCode, phoneNumber, resolve, reject) {\n        request(this.mobileIdUrl, {\n            id_code: idCode,\n            phone_number: phoneNumber,\n            language: this.language,\n            csrfmiddlewaretoken: this.csrfToken,\n        }).then(({ ok, data }) => {\n            if (ok && data.success) {\n                resolve(data);\n            } else {\n                reject(data);\n            }\n        });\n    }\n\n    midStatus() {\n        return new Promise((resolve, reject) => {\n            this.checkStatus(this.mobileIdUrl, resolve, reject);\n        });\n    }\n\n    __signHandleSmartid(idCode, country, resolve, reject) {\n        request(this.smartIdUrl, {\n            id_code: idCode,\n            country,\n            csrfmiddlewaretoken: this.csrfToken,\n        }).then(({ ok, data }) => {\n            if (ok && data.success) {\n                resolve(data);\n            } else {\n                reject(data);\n            }\n        });\n    }\n\n    smartidStatus() {\n        return new Promise((resolve, reject) => {\n            this.checkStatus(this.smartIdUrl, resolve, reject);\n        });\n    }\n\n    getError(err) {\n        return this.idCardManager.getError(err);\n    }\n}\n\nexport default IdentificationManager;\n","export const LANGUAGE_ET = \"EST\";\nexport const LANGUAGE_EN = \"ENG\";\nexport const LANGUAGE_RU = \"RUS\";\nexport const LANGUAGE_LT = \"LIT\";\n\nconst LANGUAGES = [LANGUAGE_ET, LANGUAGE_EN, LANGUAGE_RU, LANGUAGE_LT];\n\nconst errorMessages = {\n    user_cancel: {\n        [LANGUAGE_ET]: \"Allkirjastamine katkestati\",\n        [LANGUAGE_EN]: \"Signing was cancelled\",\n        [LANGUAGE_LT]: \"Pasirašymas nutrauktas\",\n        [LANGUAGE_RU]: \"Подпись была отменена\",\n    },\n\n    no_certificates: {\n        [LANGUAGE_ET]: \"Sertifikaate ei leitud\",\n        [LANGUAGE_EN]: \"Certificate not found\",\n        [LANGUAGE_LT]: \"Nerastas sertifikatas\",\n        [LANGUAGE_RU]: \"Сертификат не найден\",\n    },\n\n    invalid_argument: {\n        [LANGUAGE_ET]: \"Vigane sertifikaadi identifikaator\",\n        [LANGUAGE_EN]: \"Invalid certificate identifier\",\n        [LANGUAGE_LT]: \"Neteisingas sertifikato identifikatorius\",\n        [LANGUAGE_RU]: \"Неверный идентификатор сертификата\",\n    },\n\n    no_implementation: {\n        [LANGUAGE_ET]: \"Vajalik tarkvara on puudu\",\n        [LANGUAGE_EN]: \"Unable to find software\",\n        [LANGUAGE_LT]: \"Nerasta programinės įranga\",\n        [LANGUAGE_RU]: \"Отсутствует необходимое программное обеспечение\",\n    },\n\n    technical_error: {\n        [LANGUAGE_ET]: \"Tehniline viga\",\n        [LANGUAGE_EN]: \"Technical error\",\n        [LANGUAGE_LT]: \"Techninė klaida\",\n        [LANGUAGE_RU]: \"Техническая ошибка\",\n    },\n\n    not_allowed: {\n        [LANGUAGE_ET]: \"Veebis allkirjastamise käivitamine on võimalik vaid https aadressilt\",\n        [LANGUAGE_EN]: \"Web signing is allowed only from https:// URL\",\n        [LANGUAGE_LT]: \"Web signing is allowed only from https:// URL\",\n        [LANGUAGE_RU]: \"Подпись в интернете возможна только с URL-ов, начинающихся с https://\",\n    },\n};\n\nclass IdCardManager {\n    constructor(language) {\n        this.language = language || LANGUAGE_ET;\n\n        // filled after a successful getCertificate() call\n        this.certificate = null;\n        this.supportedSignatureAlgorithms = null;\n\n        // filled after a successful sign() call\n        this.signatureAlgorithm = null;\n    }\n\n    initializeIdCard() {\n        /**\n         * Use the first available global backend in the order of preference:\n         *\n         * 1. web-eid\n         * 2. hwcrypto\n         *\n         * The backend should be included in the page and should expose a global object.\n         *\n         * - hwcrypto.js - does it out of the box\n         * - web-eid.js - one needs to include the dist/iife build, see https://github.com/web-eid/web-eid.js#without-a-module-system\n         */\n        return new Promise(function (resolve, reject) {\n            if (typeof window.webeid !== \"undefined\") {\n                resolve(\"web-eid\");\n            } else if (typeof window.hwcrypto !== \"undefined\" && window.hwcrypto.use(\"auto\")) {\n                resolve(\"hwcrypto\");\n            } else {\n                reject(\"Backend selection failed\");\n            }\n        });\n    }\n\n    /**\n     * Requests the Web-eID browser extension to retrieve the signing certificate of the user with the\n     * selected language. The certificate must be sent to the back end for preparing the\n     * digital signature container and passed to sign() as the first parameter (hence why we also cache it\n     * on the instance).\n     *\n     * see more - https://github.com/web-eid/web-eid.js#get-signing-certificate\n     *\n     * Note: SupportedSignatureAlgorithms are available on the instance after the promise resolves.\n     *\n     * @returns {Promise<String>}\n     */\n    getCertificate() {\n        return new Promise((resolve, reject) => {\n            const options = { lang: this.language };\n\n            window.webeid.getSigningCertificate(options).then(\n                ({ certificate, supportedSignatureAlgorithms }) => {\n                    this.certificate = certificate;\n                    this.supportedSignatureAlgorithms = supportedSignatureAlgorithms;\n\n                    resolve(certificate);\n                },\n                (err) => {\n                    reject(err);\n                },\n            );\n        });\n    }\n\n    /**\n     * Requests the Web-eID browser extension to sign a document hash. The certificate must be retrieved\n     * using getCertificate method above (getSigningCertificate in web-eid) and the hash must be retrieved\n     * from the back end creating the container and its nested XML signatures.\n     *\n     * Returns a LibrarySignResponse object:\n     *\n     * interface LibrarySignResponse {\n     *   // Signature algorithm\n     *   signatureAlgorithm: SignatureAlgorithm;\n     *\n     *   // The base64-encoded signature\n     *   signature: string;\n     * }\n     *\n     * The known valid hashFunction values are SHA-224, SHA-256, SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-384 and SHA3-512.\n     *\n     * see more - https://github.com/web-eid/web-eid.js#get-signing-certificate\n     *\n     * @param data - base64 encoded hash of the data to be signed\n     * @param hashFunction - one of the supported hash functions. Defaults to SHA-256.\n     * @returns {Promise<String>}\n     */\n    signHexData(data, hashFunction = \"SHA-256\") {\n        return new Promise((resolve, reject) => {\n            const options = { lang: this.language };\n\n            window.webeid.sign(this.certificate, data, hashFunction, options).then(\n                (signResponse) => {\n                    this.signatureAlgorithm = signResponse.signatureAlgorithm;\n                    resolve(signResponse.signature);\n                },\n                (err) => {\n                    reject(err);\n                },\n            );\n        });\n    }\n\n    /* Language */\n\n    get language() {\n        return this._language;\n    }\n\n    set language(l) {\n        if (LANGUAGES.indexOf(l) !== -1) {\n            this._language = l;\n        }\n    }\n\n    /* Errors */\n    getError(err) {\n        // TODO: mapping for web-eid errors too\n        //\n        // https://github.com/web-eid/web-eid.js#error-codes\n\n        if (typeof errorMessages[err] === \"undefined\") {\n            err = \"technical_error\";\n        }\n\n        return { error_code: err, message: errorMessages[err][this.language] };\n    }\n}\n\nexport default IdCardManager;\n"],"names":[],"version":3,"file":"Esteid.main.js.map","sourceRoot":"../"}