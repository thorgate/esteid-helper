(()=>{var a="EST",l="ENG",d="RUS",c="LIT",w=[a,l,d,c],m={user_cancel:{[a]:"Allkirjastamine katkestati",[l]:"Signing was cancelled",[c]:"Pasira\u0161ymas nutrauktas",[d]:"\u041F\u043E\u0434\u043F\u0438\u0441\u044C \u0431\u044B\u043B\u0430 \u043E\u0442\u043C\u0435\u043D\u0435\u043D\u0430"},no_certificates:{[a]:"Sertifikaate ei leitud",[l]:"Certificate not found",[c]:"Nerastas sertifikatas",[d]:"\u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D"},invalid_argument:{[a]:"Vigane sertifikaadi identifikaator",[l]:"Invalid certificate identifier",[c]:"Neteisingas sertifikato identifikatorius",[d]:"\u041D\u0435\u0432\u0435\u0440\u043D\u044B\u0439 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0430"},no_implementation:{[a]:"Vajalik tarkvara on puudu",[l]:"Unable to find software",[c]:"Nerasta programin\u0117s \u012Franga",[d]:"\u041E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E\u0435 \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u043D\u043E\u0435 \u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0435\u043D\u0438\u0435"},version_mismatch:{[a]:"Allkirjastamise tarkvara ja brauseri laienduse versioonid ei \xFChti. Palun uuendage oma id-kaardi tarkvara.",[l]:"The versions of the signing software and browser extension do not match. Please update your ID card software.",[c]:"Parakst\u012B\u0161anas programmas un p\u0101rl\u016Bka papla\u0161in\u0101juma versijas nesakr\u012Bt. L\u016Bdzu, atjauniniet savu ID kartes programmat\u016Bru.",[d]:"\u0412\u0435\u0440\u0441\u0438\u0438 \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u0434\u043B\u044F \u043F\u043E\u0434\u043F\u0438\u0441\u0430\u043D\u0438\u044F \u0438 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430 \u043D\u0435 \u0441\u043E\u0432\u043F\u0430\u0434\u0430\u044E\u0442. \u041F\u043E\u0436\u0430\u043B\u0443\u0439\u0441\u0442\u0430, \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u0435 \u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u043D\u043E\u0435 \u043E\u0431\u0435\u0441\u043F\u0435\u0447\u0435\u043D\u0438\u0435 \u0434\u043B\u044F \u0432\u0430\u0448\u0435\u0439 \u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439 \u043A\u0430\u0440\u0442\u044B."},technical_error:{[a]:"Tehniline viga",[l]:"Technical error",[c]:"Technin\u0117 klaida",[d]:"\u0422\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u0430\u044F \u043E\u0448\u0438\u0431\u043A\u0430"},not_allowed:{[a]:"Veebis allkirjastamise k\xE4ivitamine on v\xF5imalik vaid https aadressilt",[l]:"Web signing is allowed only from https:// URL",[c]:"Web signing is allowed only from https:// URL",[d]:"\u041F\u043E\u0434\u043F\u0438\u0441\u044C \u0432 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u0435 \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u0430 \u0442\u043E\u043B\u044C\u043A\u043E \u0441 URL-\u043E\u0432, \u043D\u0430\u0447\u0438\u043D\u0430\u044E\u0449\u0438\u0445\u0441\u044F \u0441 https://"}},_=class{constructor(e){this.language=e||a,this.certificate=null,this.supportedSignatureAlgorithms=null,this.signatureAlgorithm=null}initializeIdCard(){return new Promise(function(e,t){typeof window.webeid<"u"?e("web-eid"):typeof window.hwcrypto<"u"&&window.hwcrypto.use("auto")?e("hwcrypto"):t("Backend selection failed")})}getCertificate(){return new Promise((e,t)=>{let r={lang:this.language};window.webeid.getSigningCertificate(r).then(({certificate:i,supportedSignatureAlgorithms:n})=>{this.certificate=i,this.supportedSignatureAlgorithms=n,e(i)},i=>{t(i)})})}signHexData(e,t="SHA-256"){return new Promise((r,i)=>{let n={lang:this.language};window.webeid.sign(this.certificate,e,t,n).then(s=>{this.signatureAlgorithm=s.signatureAlgorithm,r(s.signature)},s=>{i(s)})})}get language(){return this._language}set language(e){w.indexOf(e)!==-1&&(this._language=e)}getWebeidErrorMapping(e){switch((e?e.code:null)||null){case"ERR_WEBEID_CONTEXT_INSECURE":return"not_allowed";case"ERR_WEBEID_ACTION_TIMEOUT":return"technical_error";case"ERR_WEBEID_USER_CANCELLED":case"ERR_WEBEID_USER_TIMEOUT":return"user_cancel";case"ERR_WEBEID_VERSION_MISMATCH":case"ERR_WEBEID_VERSION_INVALID":return"version_mismatch";case"ERR_WEBEID_EXTENSION_UNAVAILABLE":case"ERR_WEBEID_NATIVE_UNAVAILABLE":return"no_implementation";case"ERR_WEBEID_NATIVE_FATAL":return e.message.includes("https")?"not_allowed":"technical_error";default:case"ERR_WEBEID_UNKNOWN_ERROR":case"ERR_WEBEID_NATIVE_INVALID_ARGUMENT":case"ERR_WEBEID_ACTION_PENDING":case"ERR_WEBEID_MISSING_PARAMETER":return"technical_error"}}getError(e){let t;return typeof m[e]>"u"?t=this.getWebeidErrorMapping(e)||"technical_error":t=e,{error_code:t,message:m[t][this.language],raw:e}}},p=_;var u=async(h,e,t="POST")=>{let r={"Content-Type":"application/json"},i=null;t!=="GET"&&(r["X-CSRFToken"]=e.csrfmiddlewaretoken,i=JSON.stringify(e||{}));try{let n=await fetch(h,{method:t,headers:r,body:i}),s=await n.text();try{let o=JSON.parse(s);return o.success=o.status==="success",o.pending=`${n.status}`=="202",{data:o,ok:n.ok}}catch{return console.log("Failed to parse response as JSON",s),{}}}catch(n){return console.log(n),{}}},E=class{constructor({language:e,idUrl:t,mobileIdUrl:r,smartIdUrl:i,csrfToken:n,pollInterval:s}){this.idCardManager=new p(e),this.idUrl=t,this.mobileIdUrl=r,this.smartIdUrl=i,this.csrfToken=n,this.language=e,this.pollInterval=s||3e3}checkStatus(e,t,r){let i=this.pollInterval,n=this.csrfToken,s=()=>{u(e,{csrfmiddlewaretoken:n},"PATCH").then(({ok:o,data:g})=>{o&&g.pending?setTimeout(()=>s(),i):o&&g.success?t(g):r(g)}).catch(o=>{console.log("Status error",o)})};return s()}signWithIdCard(){return new Promise((e,t)=>{this.__signHandleIdCard(e,t)})}signWithMobileId({idCode:e,phoneNumber:t}){return new Promise((r,i)=>{this.__signHandleMid(e,t,r,i)})}signWithSmartId({idCode:e,country:t}){return new Promise((r,i)=>{this.__signHandleSmartid(e,t,r,i)})}__signHandleIdCard(e,t){this.idCardManager.initializeIdCard().then(()=>{this.idCardManager.getCertificate().then(r=>{u(this.idUrl,{csrfmiddlewaretoken:this.csrfToken,certificate:r}).then(({ok:i,data:n})=>{i&&n.success?this.__doSign(n.digest,e,t):t(n)})},t)},t)}__doSign(e,t,r){this.idCardManager.signHexData(e).then(i=>{u(this.idUrl,{csrfmiddlewaretoken:this.csrfToken,signature_value:i},"PATCH").then(({ok:n,data:s})=>{n&&s.success?t(s):r(s)})},r)}__signHandleMid(e,t,r,i){u(this.mobileIdUrl,{id_code:e,phone_number:t,language:this.language,csrfmiddlewaretoken:this.csrfToken}).then(({ok:n,data:s})=>{n&&s.success?r(s):i(s)})}midStatus(){return new Promise((e,t)=>{this.checkStatus(this.mobileIdUrl,e,t)})}__signHandleSmartid(e,t,r,i){u(this.smartIdUrl,{id_code:e,country:t,csrfmiddlewaretoken:this.csrfToken}).then(({ok:n,data:s})=>{n&&s.success?r(s):i(s)})}smartidStatus(){return new Promise((e,t)=>{this.checkStatus(this.smartIdUrl,e,t)})}getError(e){return this.idCardManager.getError(e)}},I=E;var f={IdentificationManager:I,Languages:{ET:a,EN:l,RU:d,LT:c}};var A=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{};A.Esteid=f;var L=f;})();
